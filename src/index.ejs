<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap"
    />

    <title>Mfe Root</title>
    <style>

      * {
        margin: 0;
        padding: 0;
      }

      body {
        background: #fafafa !important;
        display: flex;
        margin: 0;
      }

      body.dark {
        background: #292929 !important;
      }

      .nav {
        position: fixed;
      }

      .main {
        flex: 1;
        transition: margin-left 0.3s ease;
        margin-left: 16rem;
        
      }
      
      .main.close {
        margin-left: 3.5rem;

      }

      .not-found--container {
        font-family: "Segoe UI", sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
      }

      .not-found--container.dark {
        background-color: #292929;
        color: #fafafa;
      }

    </style>
    <!--
    Remove this if you only support browsers that support async/await.
    This is needed by babel to share largeish helper code for compiling async/await in older
    browsers. More information at https://github.com/single-spa/create-single-spa/issues/112
  -->
    <script src="https://cdn.jsdelivr.net/npm/regenerator-runtime@0.13.7/runtime.min.js"></script>

    <!--
    This CSP allows any SSL-enabled host and for arbitrary eval(), but you should limit these directives further to increase your app's security.
    Learn more about CSP policies at https://content-security-policy.com/#directive
  -->
    <!-- <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self' https: localhost:*; script-src 'unsafe-inline' 'unsafe-eval' https: localhost:*; connect-src https: localhost:* ws://localhost:*; style-src 'unsafe-inline' https:; object-src 'none';"
    /> -->
    <meta name="importmap-type" content="systemjs-importmap" />
    <!-- If you wish to turn off import-map-overrides for specific environments (prod), uncomment the line below -->
    <!-- More info at https://github.com/joeldenning/import-map-overrides/blob/master/docs/configuration.md#domain-list -->
    <!-- <meta name="import-map-overrides-domains" content="denylist:prod.example.com" /> -->

    <!-- Shared dependencies go into this import map. Your shared dependencies must be of one of the following formats:

    1. System.register (preferred when possible) - https://github.com/systemjs/systemjs/blob/master/docs/system-register.md
    2. UMD - https://github.com/umdjs/umd
    3. Global variable

    More information about shared dependencies can be found at https://single-spa.js.org/docs/recommended-setup#sharing-with-import-maps.
  -->
    <script type="systemjs-importmap">
      {
        "imports": {
          "single-spa": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
          "@emotion/react": "https://unpkg.com/@emotion/react@11.1.1/dist/emotion-react.umd.min.js",
          "@emotion/styled": "https://unpkg.com/@emotion/styled@11.11.0/dist/emotion-styled.umd.min.js",
          "react": "https://unpkg.com/react@18.2.0/umd/react.production.min.js",
          "react-dom": "https://unpkg.com/react-dom@18.2.0/umd/react-dom.production.min.js"
         
        }
      }
    </script>

    <link
      rel="preload"
      href="https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js"
      as="script"
    />

    <!-- Add your organization's prod import map URL to this script's src  -->
    <!-- <script type="systemjs-importmap" src="/importmap.json"></script> -->

    <% if (isLocal) { %>
    <script type="systemjs-importmap">
      {
        "imports": {
         
          "@microfrontend-root": "http://localhost:9000/microfrontend-root-root-config.js",
          "@microfrontend-dashboard": "http://localhost:4302/system/microfrontend-dashboard.js" ,
          "@microfrontend-navbar": "http://localhost:4304/system/microfrontend-navbar.js",
          "@microfrontend-jobpostings": "http://localhost:4303/system/microfrontend-jobpostings.js",
          "@microfrontend-announcements": "http://localhost:4301/system/microfrontend-announcements.js",
          "@microfrontend-home": "http://localhost:4305/system/microfrontend-home.js"          
        }
      }
    </script>
    <% } else { %>

      <script>

        async function addImportmap  ()  {
        const hostname = window.location.hostname;

        const isDevEnv = hostname.startsWith("dev-");
        
        const scriptEl = document.createElement("script");

        scriptEl.type = "systemjs-importmap";

        let importMapUrl = "";

        if(isDevEnv) {
          importMapUrl = "https://mfe-importmap-dev.onrender.com/import-map.json";
        } else {
          importMapUrl = "https://mfe-importmap-prod.onrender.com/import-map.json";
        }

        scriptEl.src = importMapUrl;
        
        document.head.appendChild(scriptEl);

        if (typeof System !== 'undefined' && System.updateImportMap) {
          const response = await fetch(importMapURL);
          if (response.ok) {
            const importMapConfig = await response.json();
            System.updateImportMap(importMapConfig);
          } else {
            console.error('Failed to fetch the import map configuration from the provided URL. Please check the URL and try again.');
            return;
          }
        }

      }

      addImportmap();
            
      </script>

    <% } %>

    <!-- "@mfe-lib/styleguide": "http://localhost:4173/system/styleguide.js", -->


    <script src="https://cdn.jsdelivr.net/npm/import-map-overrides@2.2.0/dist/import-map-overrides.js"></script>
    <% if (isLocal) { %>
    <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js"></script>
    <% } else { %>
    <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.min.js"></script>
    <% } %>


      
  </head>
  <body>
    <noscript> You need to enable JavaScript to run this app. </noscript>
    <script>
      System.import('@microfrontend-root');
      
    </script>

    <script>
      const isLightTheme = () =>   (localStorage.getItem('mfe-theme') ?? 'light') === 'light';
    </script>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const observer = new MutationObserver(() => {
          if (document.querySelector('.not-found--container')) {
            const notFoundContainer = document.querySelector('.not-found--container');
            const isLight = isLightTheme();

            if (!isLight) {
              notFoundContainer.classList.add('dark');
            }
              
          }
        });

        observer.observe(document.body, { childList: true, subtree: true });
      })

    </script>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const observer = new MutationObserver(() => {
          if (document.body) {
            const body = document.body;

            const isLight = isLightTheme();

            if (!isLight) {
              body.classList.add('dark');
            } else {
              body.classList.remove('dark');
            }
              
          }
        });

        observer.observe(document.body, { childList: true, subtree: true });
      })
    </script>

    <script>

        const observer = new MutationObserver(() => {
          
          if (localStorage.getItem('mfe-theme')) {
            const isLight = isLightTheme();
            const notFoundContainer = document.querySelector('.not-found--container');

            if (isLight && notFoundContainer) {
              notFoundContainer.classList.remove('dark');
            }
              
          }
        });

        observer.observe(document.body, { childList: true, subtree: true });

    </script>

    <script>
        const navbarSizeChannel = new BroadcastChannel('navbarSizeChannel');

        navbarSizeChannel.onmessage = (event) => {
          const isOpen = event.data.openNav;
         
          const main = document.querySelector('main');

          if(!isOpen) {
            main.classList.add('close');
          } else {
            main.classList.remove('close');
          }
        };


    </script>


    <import-map-overrides-full
      show-when-local-storage="devtools"
      dev-libs
    ></import-map-overrides-full>
  </body>
</html>
